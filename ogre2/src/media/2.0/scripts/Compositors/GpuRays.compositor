/*
compositor_node "GpuRays1stPass"
{
  target rt_output
  {
    pass render_quad
    {
      material GpuRaysScan1st
    }
  }

  out 0 rt_output
}


compositor_node "GpuRays2ndPass"
{
  in 0 rt_output

  custom_id ign-rendering/GpuRays2ndPass

  target rt_output
  {
    pass render_quad
    {
      material GpuRaysScan2nd
    }
  }
}

workspace GpuRays1stPassWorkspace
{
  connect_output GpuRays1stPass 0
}
*/


/*compositor_node GpuRays1stPass
{
  in 0 rt_input

  // Instruct we want to use a depth texture (32-bit float). The "depth_texture" keyword is necessary.
  // Specifying The depth format is optional and so is the depth pool. However recommended to specify
  // them to avoid surprises.
  texture firstPass target_width target_height PF_R8G8B8 depth_format PF_D32_FLOAT depth_texture depth_pool 2

  // Declare the depth texture view (which becomes so by using PF_D32_FLOAT as format).
  // Settings MUST match (depth format, pools, resolution). Specifying the depth pool is necessary,
  // otherwise the depth texture will get its own depth buffer, instead of becoming a view.
  texture firstPassDepthTexture target_width target_height PF_D32_FLOAT depth_pool 2

  // Draw everything, colour and depth
  target firstPass
  {
    pass clear
    {
      colour_value 0.2 0.3 0.4 1.0
    }
    pass render_scene
    {
    }
  }

  target rt_input
  {
    pass clear {}
    pass render_quad
    {
      material GpuRaysScan1st
      input 0 firstPassDepthTexture
      input 1 firstPass
    }
  }
  out 0 rt_input
}
*/

compositor_node GpuRays1stPass
{
  in 0 rt_input

  texture firstPass target_width target_height PF_D32_FLOAT

  target firstPass
  {
    pass clear
    {
      colour_value 0.7 0.3 0.4 1.0
    }
    pass render_scene
    {
    }
  }

  target rt_input
  {
    pass clear
    {
      colour_value 0.2 0.3 0.4 1.0
    }
    pass render_quad
    {
      material GpuRaysScan1st
      input 0 firstPass
    }
  }
  out 0 rt_input
}

workspace GpuRays1stPassWorkspace
{
  connect_output GpuRays1stPass 0
}


compositor_node GpuRays2ndPass
{
  in 0 rt_input

  texture secondPass target_width target_height PF_D32_FLOAT

  target secondPass
  {
    pass clear { }
    pass render_scene
    {
    }
  }

  target rt_input
  {
    pass clear
    {
      colour_value 0.2 0.3 0.4 1.0
    }
    pass render_quad
    {
      material GpuRaysScan2nd
      input 0 secondPass
    }
  }
  out 0 rt_input
}

workspace GpuRays2ndPassWorkspace
{
  connect_output GpuRays2ndPass 0
}
