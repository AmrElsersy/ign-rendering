load(
    "//ign_bazel:build_defs.bzl",
    "IGNITION_FEATURES",
    "IGNITION_ROOT",
    "IGNITION_VISIBILITY",
    "cmake_configure_file",
    "generate_include_header",
    "ign_config_header",
    "ign_export_header",
)

package(
    default_visibility = IGNITION_VISIBILITY,
    features = IGNITION_FEATURES,
)

licenses(["notice"])

exports_files(["LICENSE"])

RESOURCE_PATH = "ign_rendering"

PROJECT_NAME = "ignition-rendering"

PROJECT_MAJOR = 4

PROJECT_MINOR = 0

PROJECT_PATCH = 0

# Generates config.hh based on the version numbers in CMake code.
ign_config_header(
    name = "config",
    src = "include/ignition/rendering/config.hh.in",
    out = "include/ignition/rendering/config.hh",
    cmakelists = ["include/ignition/CMakeLists.txt"],
    extra_defines = [
        "IGN_PROJECT_NAME=rendering",
        "IGN_RENDERING_RESOURCE_PATH=./ign_rendering/",
        "IGNITION_RENDERING_ENGINE_INSTALL_DIR=foo",
        "HAVE_OGRE2=1",
    ],
    project_name = PROJECT_NAME,
    project_version = (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),
)

ign_export_header(
    name = "include/ignition/rendering/Export.hh",
    export_base = "IGNITION_RENDERING",
    lib_name = "ignition-rendering",
    visibility = ["//visibility:private"],
)

public_headers_no_gen = glob([
    "include/ignition/rendering/*.hh",
    "include/ignition/rendering/base/*.hh",
])

test_sources = [
    "src/ArrowVisual_TEST.cc",
    "src/AxisVisual_TEST.cc",
    "src/Camera_TEST.cc",
    "src/GaussianNoisePass_TEST.cc",
    "src/GizmoVisual_TEST.cc",
    "src/Grid_TEST.cc",
    "src/Light_TEST.cc",
    "src/Marker_TEST.cc",
    "src/Material_TEST.cc",
    "src/MeshDescriptor_TEST.cc",
    "src/Mesh_TEST.cc",
    "src/OrbitViewController_TEST.cc",
    "src/PixelFormat_TEST.cc",
    "src/RayQuery_TEST.cc",
    "src/RenderEngine_TEST.cc",
    "src/RenderingIface_TEST.cc",
    "src/RenderPassSystem_TEST.cc",
    "src/RenderTarget_TEST.cc",
    "src/Scene_TEST.cc",
    "src/ShaderParams_TEST.cc",
    "src/ShaderParam_TEST.cc",
    "src/Text_TEST.cc",
    "src/ThermalCamera_TEST.cc",
    "src/TransformController_TEST.cc",
    "src/Visual_TEST.cc",
    "src/WireBox_TEST.cc",
]

generate_include_header(
    name = "renderinghh_genrule",
    out = "include/ignition/rendering.hh",
    hdrs = public_headers_no_gen + [
        "include/ignition/rendering/config.hh",
        "include/ignition/rendering/Export.hh",
    ],
)

public_headers = public_headers_no_gen + [
    "include/ignition/rendering/config.hh",
    "include/ignition/rendering/Export.hh",
    "include/ignition/rendering.hh",
]

cc_library(
    name = "ign_rendering",
    srcs = [
        "src/GaussianNoisePass.cc",
        "src/Image.cc",
        "src/LidarVisual.cc",
        "src/Marker.cc",
        "src/MeshDescriptor.cc",
        "src/OrbitViewController.cc",
        "src/PixelFormat.cc",
        "src/RenderEngineManager.cc",
        "src/RenderEnginePlugin.cc",
        "src/RenderPassSystem.cc",
        "src/RenderingIface.cc",
        "src/ShaderParam.cc",
        "src/ShaderParams.cc",
        "src/ShaderType.cc",
        "src/TransformController.cc",
        "src/Utils.cc",
        "src/WireBox.cc",
        "src/base/BaseObject.cc",
        "src/base/BaseRenderEngine.cc",
        "src/base/BaseScene.cc",
    ],
    hdrs = public_headers,
    defines = [
        "IGN_RENDERING_PLUGIN_PATH='\"ign_rendering/ogre2/\"'",
    ],
    includes = ["include"],
    deps = [
        IGNITION_ROOT + "ign_common",
        IGNITION_ROOT + "ign_common/events",
        IGNITION_ROOT + "ign_common/graphics",
        IGNITION_ROOT + "ign_plugin/loader",
        "@X//:Xaw",
    ],
)

cmake_configure_file(
    name = "test_config",
    src = "test/test_config.h.in",
    out = "test/test_config.h",
    cmakelists = ["test/CMakeLists.txt"],
    defines = [
        "PROJECT_BINARY_DIR=./ign_rendering",
        "PROJECT_SOURCE_DIR=./ign_rendering",
        "CMAKE_BINARY_DIR=./ign_rendering",
    ],
    visibility = ["//visibility:private"],
)

cc_library(
    name = "test_utils",
    srcs = ["test/test_config.h"],
    data = [
        "test/media/meshes/walk.dae",
        "test/media/materials/textures/texture.png",
    ],
    includes = ["test"],
    visibility = ["//visibility:private"],
)

[
    cc_test(
      name = src.replace("/", "_").replace(".cc", "").replace("src_", ""),
      srcs = [src],
      defines = [
          "IGN_RENDERING_TEST_PLUGIN_PATH='\"ign_rendering/ogre2/\"'",
      ],
      data = [
        IGNITION_ROOT + "ign_rendering/ogre2:libignition-rendering-ogre2.so",
      ],
      deps = [
          ":ign_rendering",
          ":test_utils",
          "@gtest",
          "@gtest//:gtest_main",
      ],
  ) 
  for src in test_sources
]

[
    cc_test(
        name = "INTEGRATION_" + test.split("/")[2].replace(".cc", ""),
        srcs = [test],
        includes = [
            "test/integration",
        ],
        deps = [
            ":test_utils",
            ":ign_rendering",
            "@gtest",
            "@gtest//:gtest_main",
        ],
    )
    for test in glob(["test/integration/*.cc"])
]


cc_binary(
    name = "ogre2_demo",
    srcs = [
        "examples/ogre2_demo/GlutWindow.cc",
        "examples/ogre2_demo/GlutWindow.hh",
        "examples/ogre2_demo/Main.cc",
    ],
    data = [
        IGNITION_ROOT + "ign_rendering/ogre2:libignition-rendering-ogre2.so",
        "examples/ogre2_demo/media",
    ],
    deps = [
        ":ign_rendering",
        "@gl//:GL",
        "@gl//:GLU",
        "@gl//:glut",
    ],
)
